#include<stdio.h>
#include<stdlib.h>
struct person {
	char* name;
	int age;
};
int  main() {
	struct person p1;
	p1.name = (char*)malloc(50 * sizeof(char));
	if (p1.name == NULL) {
		printf("error");
	}
	p1.age = 20;
	printf("Name: %s, Age: %d\n", p1.name, p1.age);
	free(p1.name);



	return 0;

}

//padding with pack of 2 pow 1
#include <stdio.h>

#pragma pack(2)  

struct MyStruct {
    char a;  
    int b;   
};

int main() {
    struct MyStruct s;
    printf("Size of MyStruct: %zu\n", sizeof(s));  
    // access elements without padding
    
    return 0;
}
//accessing element with padding and without padding
#include<stdio.h>
#include<stdlib.h>
struct person {
	char name;
	int age;
};
#pragma pack(1)
struct person2 {
	char ch;
	int age;
};
int  main() {
    struct person p1;
	p1.name = "mansi";
	p1.age = 20;
	printf("Name: %c, Age: %d\n", p1.name, p1.age);
	printf("Size of structure with Padded: %zu\n", sizeof(p1));
	struct person2 p2;
	printf("Size of structure without Padded: %zu\n", sizeof(p2));




	return 0;

}
//pointer arithematic in 3d array
#include <stdio.h>

int main() {
    int arr[3][4][5] = {
        {
            {1, 2, 3, 4, 5},
            {6, 7, 8, 9, 10},
            {11, 12, 13, 14, 15},
            {16, 17, 18, 19, 20}
        },
        {
            {21, 22, 23, 24, 25},
            {26, 27, 28, 29, 30},
            {31, 32, 33, 34, 35},
            {36, 37, 38, 39, 40}
        },
        {
            {41, 42, 43, 44, 45},
            {46, 47, 48, 49, 50},
            {51, 52, 53, 54, 55},
            {56, 57, 58, 59, 60}
        }
    };

    int* ptr = (int*)arr;

    
    int i = 1, j = 2, k = 3;
    int num_rows = 4, num_cols = 5;

    
    int value = *(ptr + (i * num_rows * num_cols) + (j * num_cols) + k);

    printf("Value at arr[%d][%d][%d] = %d\n", i, j, k, value); 

    return 0;
}// memory management with pointers as structure members
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    char* name;
    int* marks;
    int num_marks;
};

int main() {
    struct Student student;

    student.name = (char*)malloc(50 * sizeof(char)); 
    if (student.name == NULL) {
        printf("Memory allocation failed for name\n");
        return 1;
    }

  
    student.num_marks = 5;
    student.marks = (int*)malloc(student.num_marks * sizeof(int));  
    if (student.marks == NULL) {
        printf("Memory allocation failed for marks\n");
        free(student.name);  
        return 1;
    }


    strcpy(student.name, "Mansi Shahi");
    for (int i = 0; i < student.num_marks; i++) {
        student.marks[i] = (i + 1) * 10;  
    }

   
    printf("Student Name: %s\n", student.name);
    printf("Marks: ");
    for (int i = 0; i < student.num_marks; i++) {
        printf("%d ", student.marks[i]);
    }
    printf("\n");

   
    free(student.name);
    free(student.marks);

    return 0;
}
